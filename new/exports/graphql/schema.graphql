type Classroom {
  class: String
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input ClassroomInput {
  class: String
  users: [ID]
}

input createClassroomInput {
  data: ClassroomInput
}

type createClassroomPayload {
  classroom: Classroom
}

input createRateInput {
  data: RateInput
}

type createRatePayload {
  rate: Rate
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSkillInput {
  data: SkillInput
}

type createSkillPayload {
  skill: Skill
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteClassroomInput {
  where: InputID
}

type deleteClassroomPayload {
  classroom: Classroom
}

input deleteRateInput {
  where: InputID
}

type deleteRatePayload {
  rate: Rate
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSkillInput {
  where: InputID
}

type deleteSkillPayload {
  skill: Skill
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editClassroomInput {
  class: String
  users: [ID]
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editGroupskillsInput {
  id: ID
  skill: ID
  rate: ID
}

input editRateInput {
  label: String
  level: Int
  skills: [ID]
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editSkillInput {
  name: String
  rate: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  Skills: [editGroupskillsInput]
  Job: String
  description: String
  avatar: ID
  company: String
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

type GroupSkills {
  skill: Skill
  rate: Rate
  id: ID!
}

input GroupskillsInput {
  skill: ID
  rate: ID
}

input InputID {
  id: ID!
}

scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | Classroom | createClassroomPayload | updateClassroomPayload | deleteClassroomPayload | Rate | createRatePayload | updateRatePayload | deleteRatePayload | Skill | createSkillPayload | updateSkillPayload | deleteSkillPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createClassroom(input: createClassroomInput): createClassroomPayload
  updateClassroom(input: updateClassroomInput): updateClassroomPayload
  deleteClassroom(input: deleteClassroomInput): deleteClassroomPayload
  createRate(input: createRateInput): createRatePayload
  updateRate(input: updateRateInput): updateRatePayload
  deleteRate(input: deleteRateInput): deleteRatePayload
  createSkill(input: createSkillInput): createSkillPayload
  updateSkill(input: updateSkillInput): updateSkillPayload
  deleteSkill(input: deleteSkillInput): deleteSkillPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UserInput!): UsersPermissionsLoginPayload!
}

type Query {
  classroom(id: ID!): Classroom
  classrooms(sort: String, limit: Int, start: Int, where: JSON): [Classroom]
  rate(id: ID!): Rate
  rates(sort: String, limit: Int, start: Int, where: JSON): [Rate]
  skill(id: ID!): Skill
  skills(sort: String, limit: Int, start: Int, where: JSON): [Skill]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

type Rate {
  label: String
  level: Int
  skills(sort: String, limit: Int, start: Int, where: JSON): [Skill]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input RateInput {
  label: String
  level: Int
  skills: [ID]
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Skill {
  name: String
  rate: Rate
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input SkillInput {
  name: String
  rate: ID
}

input updateClassroomInput {
  where: InputID
  data: editClassroomInput
}

type updateClassroomPayload {
  classroom: Classroom
}

input updateRateInput {
  where: InputID
  data: editRateInput
}

type updateRatePayload {
  rate: Rate
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSkillInput {
  where: InputID
  data: editSkillInput
}

type updateSkillPayload {
  skill: Skill
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  Skills: [GroupskillsInput]
  Job: String
  description: String
  avatar: ID
  company: String
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsUser!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  id: ID!
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  id: ID!
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  Skills: [GroupSkills]
  Job: String
  description: String
  avatar: UploadFile
  company: String
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}
